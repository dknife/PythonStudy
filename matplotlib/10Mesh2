# -----------------------------------------------------------------------------
# 2017, Young-Min Kang. All Rights Reserved.
# Euler simulation of Spring-Damper
# -----------------------------------------------------------------------------

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.widgets import Button
from matplotlib.patches import Polygon
from matplotlib.collections import PatchCollection


matplotlib.rcParams['toolbar'] = 'None'

fig, ax = plt.subplots()

def distance(a, b) :
    lx = a[0] - b[0]
    ly = a[1] - b[1]
    return np.sqrt(lx*lx+ly*ly)
nW = 10
nH = 8
nP = nW * nH
nS = (nW-1)*nH + (nH-1)*nW + (nW-1)*(nH-1)*2
wLen = 1.0

P = np.zeros((nP,2))
S = np.zeros((nS,2), dtype=np.int)
V = np.zeros((nP,2))
F = np.zeros((nP,2))

def SetVertices(nw, nh, width) :
    idx = 0
    for i in range(nw):
        for j in range(nh):
            P[idx]=[i*width,15.0-j*width]
            idx+=1

def SetSprings(nw, nh) :
    for i in range((nw-1)*nh) :
        r = i//(nw-1)
        c = i%(nw-1)
        idx = c*nh+r
        S[i] = [idx, idx+nh]
    for i in range((nh-1)*nw) :
        c = i//(nh-1)
        r = i%(nh-1)
        idx = c*nh+r
        S[i+(nw-1)*nh] = [idx, idx+1]
    for i in range(0, (nw-1)*(nh-1)*2, 2):
        halfI = i/2
        r = halfI//(nw - 1)
        c = halfI %(nw - 1)
        idx = c * nh + r
        S[i + (nw - 1) * nh + (nh - 1) * nw]     = [idx, idx + 1 + nh]
        S[i + (nw - 1) * nh + (nh - 1) * nw + 1] = [idx + 1, idx + nh]


SetVertices(nW, nH, wLen)
SetSprings(nW, nH)


l0 = []

for i in range(nS):
    a = S[i][0]
    b = S[i][1]
    l0.append(distance(P[a], P[b]))

k = 12000.0
d = 0.2
g = np.array([0,-9.8])
scat = plt.scatter(P[:, 0], P[:, 1])

plt.xlim(-10,10)
plt.ylim(0,20)

startFlag = True

def start(event) :
    global startFlag
    startFlag = True

def reset(event) :
    global P, V, startFlag
    P = np.array([[0.0, 15.0], [-1.0, 15.0 - np.sqrt(3.0)], [9.0, 15.0 - np.sqrt(3.0)], [0.0, 15.0 - np.sqrt(3.0) * 2.0]])
    V = np.array([[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]])
    startFlag = False

def update(frame) :
    global P, S, F, l0, k, d, startFlag
    if startFlag is False:
        scat.set_offsets(P)
        return scat,
    h = 0.009

    for i in range(nP):
        F[i] = [0,0]

    for i in range(nS):  # for every spring
        a = S[i][0]
        b = S[i][1]
        l = distance(P[a], P[b])
        m1 = 1.0;
        m2 = 1.0;
        omega1 = k/m1
        omega2 = k/m2
        omega = np.sqrt(omega1 + omega2) * np.sqrt(1-d*d/(4.0*(k)*(m1+m2)))

        vr = V[b]-V[a]
        deform = l - l0[i]
        ab = (P[b] - P[a])
        if l>0.0:
            abBar = ab / l
            dldt = np.dot(ab, vr)/l
        else :
            abBar = np.array([1.0, 0.0])
            dldt = 0.0

        alpha = d/(2.0*(m1+m2))
        A = np.sqrt(deform*deform + dldt*dldt*(m1+m2)/(k*(m1+m2)))
        dDA = 0.0
        arcsine = 0.0
        if A != 0.0 :
            dDA = deform/A;
            arcsine = np.arcsin(dDA)
        if deform>0 and dldt < 0 :
            arcsine = np.pi - arcsine

        if deform<=0 :
            if dldt > 0 :
                arcsine = 2.0 * np.pi + arcsine
            else :
                arcsine = np.pi - arcsine

        t = arcsine
        T0 = t / omega
        T1 = T0 + h
        exp_kdt0 = np.exp(-alpha*T0)
        exp_kdh = np.exp(-alpha*h*omega)
        coeff = 0.5 * A * k / ((m1+m2)*(omega*omega + d*d))
        swt = np.sin(omega*T0)
        cwt = np.cos(omega*T0)
        swh = np.sin(omega*h)
        cwh = np.cos(omega*h)

        f = -coeff*exp_kdt0 * ( swt*(exp_kdh*(d*cwh-omega*swh) - d) + cwt*(exp_kdh*(d*swh + omega*cwh) - omega) )
        F[a] += (f/m1)*abBar + 0.5*d*vr*h
        F[b] -= (f/m2)*abBar + 0.5*d*vr*h

    for i in range(nP):
        if i > -1 :
            temp = V[i]
            V[i] += g*h + F[i]
            P[i] += 0.5*(temp+V[i])*h

    # collision
    e = 0.0;
    for i in range(nP):
        if P[i][1] < 0:
            P[i][1] -= (1.0+e)*P[i][1]
            if V[i][1] < 0:
                V[i][1] -= (1.0 + e) * V[i][1]

    scat.set_offsets(P)

    return scat, #patch

def updateE(frame) :
    global P, S, F, l0, k, d, startFlag
    if startFlag is False:
        scat.set_offsets(P)
        return scat,
    h = 0.01

    for i in range(nP):
        F[i] = [0,0]

    for i in range(nS):  # for every spring
        a = S[i][0]
        b = S[i][1]
        l = distance(P[a], P[b])
        m1 = 1.0;
        m2 = 1.0;


        vr = V[b]-V[a]
        deform = l - l0[i]
        ab = (P[b] - P[a])
        if l>0.0:
            abBar = ab / l
        else :
            abBar = np.array([1.0, 0.0])

        F[a] += k*deform*abBar;
        F[b] -= k*deform*abBar;

    for i in range(nP):
        if i > -1 :
            temp = V[i]
            V[i] += g*h + F[i]*h
            P[i] += 0.5*(temp+V[i])*h

    # collision
    e = 0.0;
    for i in range(nP):
        if P[i][1] < 0:
            P[i][1] -= (1.0+e)*P[i][1]
            if V[i][1] < 0:
                V[i][1] -= (1.0 + e) * V[i][1]

    scat.set_offsets(P)

    return scat, #patch
plt.grid(True)

startBox = plt.axes([0.1, 0.9, 0.1, 0.05])
bStart = Button(startBox, 'Start')
bStart.on_clicked(start)

resetBox = plt.axes([0.2, 0.9, 0.1, 0.05])
bReset = Button(resetBox, 'Reset')
bReset.on_clicked(reset)

animation = FuncAnimation(fig, update, interval = 10, blit=True)
#animation.save('triangle.mp4', writer="ffmpeg")
plt.show()