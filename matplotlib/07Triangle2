# -----------------------------------------------------------------------------
# 2017, Young-Min Kang. All Rights Reserved.
# Euler simulation of Spring-Damper
# -----------------------------------------------------------------------------

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib.widgets import Button
from matplotlib.patches import Polygon
from matplotlib.collections import PatchCollection


matplotlib.rcParams['toolbar'] = 'None'

fig, ax = plt.subplots()

def distance(a, b) :
    lx = a[0] - b[0]
    ly = a[1] - b[1]
    return np.sqrt(lx*lx+ly*ly)

P = np.array([[0.0,15.0],[-1.0,15.0-np.sqrt(3.0)],[9.0,15.0-np.sqrt(3.0)]])
V = np.array([[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]])
S = np.array([[0,1], [1,2], [2,0]])
F = np.array([[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]])
l0 = distance(P[0], P[1])

k = 100000000000.0
d = 0.5
g = np.array([0,-9.8])
scat = plt.scatter(P[:, 0], P[:, 1])

polygon = Polygon([P[0], P[1], P[2]], closed = True)
patch=ax.add_patch(polygon)

plt.xlim(-10,10)
plt.ylim(0,20)

startFlag = True

def start(event) :
    global startFlag
    startFlag = True

def reset(event) :
    global P, V, startFlag
    P = np.array([[0.0, 15.0], [-1.0, 15.0 - np.sqrt(3.0)], [9.0, 15.0 - np.sqrt(3.0)]])
    V = np.array([[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]])
    startFlag = False

def update(frame) :
    global P, S, F, l0, k, d, startFlag
    if startFlag is False:
        scat.set_offsets(P)
        return scat,
    h = 0.001

    for i in range(3):
        F[i] = [0,0]

    for i in range(3):  # for every spring
        a = S[i][0]
        b = S[i][1]
        l = distance(P[a], P[b])
        m1 = 1.0;
        m2 = 1.0;
        omega1 = k/m1
        omega2 = k/m2
        omega = np.sqrt(omega1 + omega2)

        vr = V[b]-V[a]
        deform = l - l0
        ab = (P[b] - P[a])
        abBar = ab / l
        dldt = np.dot(ab, vr)/l

        alpha = d*k/(2.0*np.sqrt(k*(m1+m2)))
        A = np.sqrt(deform*deform + dldt*dldt*(m1+m2)/(k*(m1+m2)))
        dDA = 0.0
        arcsine = 0.0
        if A != 0.0 :
            dDA = deform/A;
            arcsine = np.arcsin(dDA)
        if deform>0 and dldt < 0 :
            arcsine = np.pi - arcsine

        if deform<=0 :
            if dldt > 0 :
                arcsine = 2.0 * np.pi + arcsine
            else :
                arcsine = np.pi - arcsine

        t = arcsine
        T0 = t / omega
        T1 = T0 + h
        exp_kdt0 = np.exp(-alpha*T0)
        exp_kdh = np.exp(-alpha*h*omega)
        coeff = 0.5 * A * k / (omega*omega + d*d)
        swt = np.sin(omega*T0)
        cwt = np.cos(omega*T0)
        swh = np.sin(omega*h)
        cwh = np.cos(omega*h)

        f = -coeff*exp_kdt0 * ( swt*(exp_kdh*(d*cwh-omega*swh) - d) + cwt*(exp_kdh*(d*swh + omega*cwh) - omega) )
        F[a] += (f/h)*abBar;
        F[b] -= (f/h)*abBar;

    for i in range(3):
        if i > -1 :
            V[i] += g*h + F[i]*h
    for i in range(3):
        P[i] += V[i]

    # collision
    e = 0.0;
    for i in range(3):
        if P[i][1] < 0:
            P[i][1] -= (1.0+e)*P[i][1]
            if V[i][1] < 0:
                V[i][1] -= (1.0 + e) * V[i][1]

    scat.set_offsets(P)
    polygon.set_xy(P)
    patch = ax.add_patch(polygon)
    return scat, patch

plt.grid(True)

startBox = plt.axes([0.1, 0.9, 0.1, 0.05])
bStart = Button(startBox, 'Start')
bStart.on_clicked(start)

resetBox = plt.axes([0.2, 0.9, 0.1, 0.05])
bReset = Button(resetBox, 'Reset')
bReset.on_clicked(reset)

animation = FuncAnimation(fig, update, interval = 10, blit=True)
animation.save('triangle.mp4', writer="ffmpeg")
plt.show()